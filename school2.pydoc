Help on module school:

NAME
    school

DESCRIPTION
    A simple teaching example of a module with a few classes.
    Persistence for the ddta structures should be implemented using the shelve library
    A Course object is a list of students, holding prerequisites and other information.
    A Student object is a simple composition of student information.

CLASSES
    builtins.list(builtins.object)
        Course
    builtins.object
        Institution
        Student
    
    class Course(builtins.list)
     |  Course(cname, majProgram=None)
     |  
     |  A course is a list of students
     |  
     |  Method resolution order:
     |      Course
     |      builtins.list
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, cname, majProgram=None)
     |      Provide a name for a course
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  find(name)
     |      Return the course object specified or return None if it doesn't exist
     |  
     |  prerequisite(self, preCourse)
     |      Add to the list of prerequisites for this course object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  allCourses = []
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.list:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iadd__(self, value, /)
     |      Implement self+=value.
     |  
     |  __imul__(self, value, /)
     |      Implement self*=value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(self, /)
     |      Return a reverse iterator over the list.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(self, /)
     |      Return the size of the list in memory, in bytes.
     |  
     |  append(self, object, /)
     |      Append object to the end of the list.
     |  
     |  clear(self, /)
     |      Remove all items from list.
     |  
     |  copy(self, /)
     |      Return a shallow copy of the list.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  extend(self, iterable, /)
     |      Extend list by appending elements from the iterable.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  insert(self, index, object, /)
     |      Insert object before index.
     |  
     |  pop(self, index=-1, /)
     |      Remove and return item at index (default last).
     |      
     |      Raises IndexError if list is empty or index is out of range.
     |  
     |  remove(self, value, /)
     |      Remove first occurrence of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  reverse(self, /)
     |      Reverse *IN PLACE*.
     |  
     |  sort(self, /, *, key=None, reverse=False)
     |      Sort the list in ascending order and return None.
     |      
     |      The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
     |      order of two equal elements is maintained).
     |      
     |      If a key function is given, apply it once to each list item and sort them,
     |      ascending or descending, according to their function values.
     |      
     |      The reverse flag can be set to sort in descending order.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.list:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.list:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.list:
     |  
     |  __hash__ = None
    
    class Institution(builtins.object)
     |  Institution(name)
     |  
     |  The institution class controls the current registry and courses list.
     |  Courses and students object created while the Institution is active
     |  are added to that institution's registry and courses list.
     |  
     |  Only one institution may be active at a time.
     |  
     |  Instance Attributes
     |  
     |      name: the name which uniquely identifies of the institution
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name)
     |      Activate a new institution object with the given name
     |  
     |  activate(self)
     |      Deactivate the active institution and activate this one
     |  
     |  clear(self)
     |      Empty the institutions records - no students, no courses
     |  
     |  deactivate(self)
     |      Deactivate this institution
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  active = None
     |  
     |  institutions = {}
    
    class Student(builtins.object)
     |  Student(sname, sid=None)
     |  
     |  Information on individual students. Also maintains a dictionary of 
     |  all known students
     |  
     |  Methods defined here:
     |  
     |  __init__(self, sname, sid=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |      # iterator method - go through courses and pick out those having
     |      # this student as a member
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  backup(storefile='studentRegistry.store')
     |      backup the student registry with a default file.
     |      This is written as a function rather than a method.  The 
     |      accepted way to create a static method is use a @staticmethod
     |      decorator, but as a teaching example, @staticmethod hasn't
     |      been introduced yet.
     |  
     |  load(loadfile='studentRegistry.store')
     |      load the student registry
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  defaultStorage = 'studentRegistry.store'
     |  
     |  logfile = <_io.TextIOWrapper name='registry.log' mode='a' encoding='UT...
     |  
     |  registry = {}

FUNCTIONS
    command_loop()
    
    loaddemo()

FILE
    /home/brown/courses/2005/Assignments/Assignment3/school.py


